// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type LoginOutput struct {
	User  *User  `json:"user,omitempty"`
	Token string `json:"token"`
}

type LoginUsernameInput struct {
	Username string     `json:"username"`
	Password string     `json:"password"`
	Type     *LoginType `json:"type,omitempty"`
}

type Mutation struct {
}

type NewUser struct {
	Username string            `json:"username"`
	Password string            `json:"password"`
	Email    string            `json:"email"`
	Profile  *UserProfileInput `json:"profile,omitempty"`
}

type Query struct {
}

type UpdateUserInput struct {
	ID          string                  `json:"id"`
	Username    *string                 `json:"username,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	UserProfile *UpdateUserProfileInput `json:"user_profile,omitempty"`
}

type UpdateUserProfileInput struct {
	PhoneNumber *string `json:"phone_number,omitempty"`
	Address     *string `json:"address,omitempty"`
	IsVerified  *bool   `json:"is_verified,omitempty"`
}

type User struct {
	ID          int          `json:"id"`
	Username    string       `json:"username"`
	Password    *string      `json:"password,omitempty"`
	Email       string       `json:"email"`
	UserProfile *UserProfile `json:"user_profile,omitempty"`
	CreatedAt   *time.Time   `json:"created_at,omitempty"`
	LastLogin   *time.Time   `json:"last_login,omitempty"`
}

type UserProfile struct {
	ID          int     `json:"id"`
	UserID      int     `json:"user_id"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	Address     *string `json:"address,omitempty"`
	IsVerified  *bool   `json:"is_verified,omitempty"`
}

type UserProfileInput struct {
	Phone   string `json:"phone"`
	Address string `json:"address"`
}

type LoginType string

const (
	LoginTypeUsername LoginType = "username"
	LoginTypeEmail    LoginType = "email"
	LoginTypePhone    LoginType = "phone"
)

var AllLoginType = []LoginType{
	LoginTypeUsername,
	LoginTypeEmail,
	LoginTypePhone,
}

func (e LoginType) IsValid() bool {
	switch e {
	case LoginTypeUsername, LoginTypeEmail, LoginTypePhone:
		return true
	}
	return false
}

func (e LoginType) String() string {
	return string(e)
}

func (e *LoginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoginType", str)
	}
	return nil
}

func (e LoginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
